{
    "sourceFile": "backend/index.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 8,
            "patches": [
                {
                    "date": 1741304464259,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1741304639991,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,35 +39,38 @@\n   });\n });\n \n // Rota GET para buscar parceiro mais próximo\n-app.get('/partners/nearby', (req, res) => {\n+app.get('/partners/nearby', async (req, res) => {\n   const { lat, lon } = req.query;\n \n   if (!lat || !lon) {\n-    return res.status(400).json({ message: 'Latitude e longitude são obrigatórios' });\n+    return res.status(400).json({ error: \"As coordenadas lat e lon são obrigatórias.\" });\n   }\n \n-  const sql = `\n-SELECT id, trading_name, owner_name, document, coverage_area\n-FROM partners\n-ORDER BY ST_Distance(\n-  ST_GeomFromText(CONCAT('POINT(', '-1', ' ', '-1', ')'), 4326),\n-  ST_GeomFromGeoJSON(coverage_area)\n-) ASC\n-LIMIT 1;\n-  `;\n+  try {\n+    const geoJson = {\n+      type: \"Point\",\n+      coordinates: [parseFloat(lon), parseFloat(lat)],\n+    };\n \n-  db.query(sql, [lon, lat, lon, lat], (err, results) => {\n-    if (err) {\n-      console.error(\"Erro ao buscar parceiro próximo\", err);\n-      res.status(500).json({ error: \"Erro ao buscar parceiro próximo\" });\n-    } else {\n-      res.json(results[0] || {});\n-    }\n-  });\n+    const [partners] = await db.query(`\n+      SELECT id, trading_name, owner_name, document, coverage_area\n+      FROM partners\n+      WHERE ST_Within(\n+        ST_GeomFromGeoJSON(coverage_area),\n+        ST_GeomFromGeoJSON('${JSON.stringify(geoJson)}')\n+      )\n+    `);\n+\n+    res.json(partners);\n+  } catch (error) {\n+    console.error('Erro ao buscar parceiros próximos:', error);\n+    res.status(500).json({ error: \"Erro ao buscar parceiros próximos. Tente novamente mais tarde.\" });\n+  }\n });\n \n+\n // Rota GET para buscar parceiro pelo ID\n app.get('/partner/:id', (req, res) => {\n   const partnerId = req.params.id;\n   const query = 'SELECT * FROM partners WHERE id = ?';\n"
                },
                {
                    "date": 1741304783563,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,95 @@\n+const express = require('express');\n+const mysql = require('mysql2');\n+const bodyParser = require('body-parser');\n+const cors = require('cors');\n+\n+const app = express();\n+const port = 3001;\n+\n+app.use(cors());\n+app.use(bodyParser.json());\n+\n+// configuração da conexão (modifique conforme necessario)\n+const db = mysql.createConnection({\n+  host: 'localhost',\n+  user: 'root',\n+  password: '12345',\n+  database: 'ze_delivery',\n+});\n+\n+// Conectar ao banco de dados\n+db.connect((err) => {\n+  if (err) {\n+    console.error('Erro de conexão: ' + err.stack);\n+    return;\n+  }\n+  console.log('Conectado ao banco de dados');\n+});\n+\n+// Rota POST para criat um novo parceiro\n+app.post('/partners', (req, res) => {\n+  const { trading_name, owner_name, document, coverage_area, address } = req.body;\n+\n+  const query = 'INSERT INTO partners (trading_name, owner_name, document, coverage_area, address) VALUES (?, ?, ?, ?, ?)';\n+  db.query(query, [trading_name, owner_name, document, JSON.stringify(coverage_area), JSON.stringify(address)], (err, result) => {\n+    if (err) {\n+      return res.status(500).json({ error: 'Erro ao criar parceiro', details: err });\n+    }\n+    res.status(201).json({ message: 'Parceiro criado com sucesso', id: result.insertId });\n+  });\n+});\n+\n+// Rota GET para buscar parceiro mais próximo\n+app.get('/partners/nearby', (req, res) => {\n+  const { lat, lon } = req.query;\n+\n+  if (!lat || !lon) {\n+    return res.status(400).json({ message: 'Latitude e longitude são obrigatórios' });\n+  }\n+\n+  const sql = `\n+    SELECT id, trading_name, owner_name, document, coverage_area\n+    FROM partners\n+    ORDER BY ST_Distance(\n+      ST_GeomFromText(CONCAT('POINT(', '-1', ' ', '-1', ')'), 4326),\n+      ST_GeomFromGeoJSON(coverage_area)\n+    ) ASC\n+    LIMIT 1;\n+  `;\n+\n+  db.query(sql, [lon, lat, lon, lat], (err, results) => {\n+    if (err) {\n+      console.error(\"Erro ao buscar parceiro próximo\", err);\n+      res.status(500).json({ error: \"Erro ao buscar parceiro próximo\" });\n+    } else {\n+      res.json(results[0] || {});\n+    }\n+  });\n+});\n+\n+// Rota GET para buscar parceiro pelo ID\n+app.get('/partner/:id', (req, res) => {\n+  const partnerId = req.params.id;\n+  const query = 'SELECT * FROM partners WHERE id = ?';\n+\n+  db.query(query, [partnerId], (err, results) => {\n+    if (err) {\n+      return res.status(500).json({ error: 'Erro ao buscar parceiro', details: err });\n+    }\n+    if (results.length === 0) {\n+      return res.status(404).json({ message: 'Parceiro não encontrado' });\n+    }\n+    res.status(200).json(results[0]);\n+  });\n+});\n+\n+\n+\n+\n+\n+\n+\n+// Iniciar o servidor\n+app.listen(port, () => {\n+  console.log(`Servidor rodando em http://localhost:${port}`);\n+});\n"
                },
                {
                    "date": 1741304810709,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,28 +43,30 @@\n app.get('/partners/nearby', (req, res) => {\n   const { lat, lon } = req.query;\n \n   if (!lat || !lon) {\n-    return res.status(400).json({ message: 'Latitude e longitude são obrigatórios' });\n+    return res.status(400).json({ error: \"As coordenadas lat e lon são obrigatórias.\" });\n   }\n \n-  const sql = `\n+  const geoJson = {\n+    type: \"Point\",\n+    coordinates: [parseFloat(lon), parseFloat(lat)],\n+  };\n+\n+  // Utilizando o método com callback e wrap em uma Promise\n+  con.query(`\n     SELECT id, trading_name, owner_name, document, coverage_area\n     FROM partners\n-    ORDER BY ST_Distance(\n-      ST_GeomFromText(CONCAT('POINT(', '-1', ' ', '-1', ')'), 4326),\n-      ST_GeomFromGeoJSON(coverage_area)\n-    ) ASC\n-    LIMIT 1;\n-  `;\n-\n-  db.query(sql, [lon, lat, lon, lat], (err, results) => {\n+    WHERE ST_Within(\n+      ST_GeomFromGeoJSON(coverage_area),\n+      ST_GeomFromGeoJSON('${JSON.stringify(geoJson)}')\n+    )\n+  `, (err, results) => {\n     if (err) {\n-      console.error(\"Erro ao buscar parceiro próximo\", err);\n-      res.status(500).json({ error: \"Erro ao buscar parceiro próximo\" });\n-    } else {\n-      res.json(results[0] || {});\n+      console.error(\"Erro ao buscar parceiros próximos:\", err);\n+      return res.status(500).json({ error: \"Erro ao buscar parceiros próximos.\" });\n     }\n+    res.json(results);\n   });\n });\n \n // Rota GET para buscar parceiro pelo ID\n@@ -92,102 +94,4 @@\n // Iniciar o servidor\n app.listen(port, () => {\n   console.log(`Servidor rodando em http://localhost:${port}`);\n });\n-const express = require('express');\n-const mysql = require('mysql2');\n-const bodyParser = require('body-parser');\n-const cors = require('cors');\n-\n-const app = express();\n-const port = 3001;\n-\n-app.use(cors());\n-app.use(bodyParser.json());\n-\n-// configuração da conexão (modifique conforme necessario)\n-const db = mysql.createConnection({\n-  host: 'localhost',\n-  user: 'root',\n-  password: '12345',\n-  database: 'ze_delivery',\n-});\n-\n-// Conectar ao banco de dados\n-db.connect((err) => {\n-  if (err) {\n-    console.error('Erro de conexão: ' + err.stack);\n-    return;\n-  }\n-  console.log('Conectado ao banco de dados');\n-});\n-\n-// Rota POST para criat um novo parceiro\n-app.post('/partners', (req, res) => {\n-  const { trading_name, owner_name, document, coverage_area, address } = req.body;\n-\n-  const query = 'INSERT INTO partners (trading_name, owner_name, document, coverage_area, address) VALUES (?, ?, ?, ?, ?)';\n-  db.query(query, [trading_name, owner_name, document, JSON.stringify(coverage_area), JSON.stringify(address)], (err, result) => {\n-    if (err) {\n-      return res.status(500).json({ error: 'Erro ao criar parceiro', details: err });\n-    }\n-    res.status(201).json({ message: 'Parceiro criado com sucesso', id: result.insertId });\n-  });\n-});\n-\n-// Rota GET para buscar parceiro mais próximo\n-app.get('/partners/nearby', async (req, res) => {\n-  const { lat, lon } = req.query;\n-\n-  if (!lat || !lon) {\n-    return res.status(400).json({ error: \"As coordenadas lat e lon são obrigatórias.\" });\n-  }\n-\n-  try {\n-    const geoJson = {\n-      type: \"Point\",\n-      coordinates: [parseFloat(lon), parseFloat(lat)],\n-    };\n-\n-    const [partners] = await db.query(`\n-      SELECT id, trading_name, owner_name, document, coverage_area\n-      FROM partners\n-      WHERE ST_Within(\n-        ST_GeomFromGeoJSON(coverage_area),\n-        ST_GeomFromGeoJSON('${JSON.stringify(geoJson)}')\n-      )\n-    `);\n-\n-    res.json(partners);\n-  } catch (error) {\n-    console.error('Erro ao buscar parceiros próximos:', error);\n-    res.status(500).json({ error: \"Erro ao buscar parceiros próximos. Tente novamente mais tarde.\" });\n-  }\n-});\n-\n-\n-// Rota GET para buscar parceiro pelo ID\n-app.get('/partner/:id', (req, res) => {\n-  const partnerId = req.params.id;\n-  const query = 'SELECT * FROM partners WHERE id = ?';\n-\n-  db.query(query, [partnerId], (err, results) => {\n-    if (err) {\n-      return res.status(500).json({ error: 'Erro ao buscar parceiro', details: err });\n-    }\n-    if (results.length === 0) {\n-      return res.status(404).json({ message: 'Parceiro não encontrado' });\n-    }\n-    res.status(200).json(results[0]);\n-  });\n-});\n-\n-\n-\n-\n-\n-\n-\n-// Iniciar o servidor\n-app.listen(port, () => {\n-  console.log(`Servidor rodando em http://localhost:${port}`);\n-});\n"
                },
                {
                    "date": 1741304994444,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n \n app.use(cors());\n app.use(bodyParser.json());\n \n-// configuração da conexão (modifique conforme necessario)\n+// configuração da conexão (modifique conforme necessário)\n const db = mysql.createConnection({\n   host: 'localhost',\n   user: 'root',\n   password: '12345',\n@@ -25,9 +25,9 @@\n   }\n   console.log('Conectado ao banco de dados');\n });\n \n-// Rota POST para criat um novo parceiro\n+// Rota POST para criar um novo parceiro\n app.post('/partners', (req, res) => {\n   const { trading_name, owner_name, document, coverage_area, address } = req.body;\n \n   const query = 'INSERT INTO partners (trading_name, owner_name, document, coverage_area, address) VALUES (?, ?, ?, ?, ?)';\n@@ -51,10 +51,9 @@\n     type: \"Point\",\n     coordinates: [parseFloat(lon), parseFloat(lat)],\n   };\n \n-  // Utilizando o método com callback e wrap em uma Promise\n-  con.query(`\n+  db.query(`\n     SELECT id, trading_name, owner_name, document, coverage_area\n     FROM partners\n     WHERE ST_Within(\n       ST_GeomFromGeoJSON(coverage_area),\n@@ -84,14 +83,8 @@\n     res.status(200).json(results[0]);\n   });\n });\n \n-\n-\n-\n-\n-\n-\n // Iniciar o servidor\n app.listen(port, () => {\n   console.log(`Servidor rodando em http://localhost:${port}`);\n });\n"
                },
                {
                    "date": 1741305178209,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n \n app.use(cors());\n app.use(bodyParser.json());\n \n-// configuração da conexão (modifique conforme necessário)\n+// configuração da conexão (modifique conforme necessario)\n const db = mysql.createConnection({\n   host: 'localhost',\n   user: 'root',\n   password: '12345',\n@@ -25,9 +25,9 @@\n   }\n   console.log('Conectado ao banco de dados');\n });\n \n-// Rota POST para criar um novo parceiro\n+// Rota POST para criat um novo parceiro\n app.post('/partners', (req, res) => {\n   const { trading_name, owner_name, document, coverage_area, address } = req.body;\n \n   const query = 'INSERT INTO partners (trading_name, owner_name, document, coverage_area, address) VALUES (?, ?, ?, ?, ?)';\n@@ -51,9 +51,9 @@\n     type: \"Point\",\n     coordinates: [parseFloat(lon), parseFloat(lat)],\n   };\n \n-  db.query(`\n+  con.query(`\n     SELECT id, trading_name, owner_name, document, coverage_area\n     FROM partners\n     WHERE ST_Within(\n       ST_GeomFromGeoJSON(coverage_area),\n@@ -83,8 +83,14 @@\n     res.status(200).json(results[0]);\n   });\n });\n \n+\n+\n+\n+\n+\n+\n // Iniciar o servidor\n app.listen(port, () => {\n   console.log(`Servidor rodando em http://localhost:${port}`);\n });\n"
                },
                {
                    "date": 1741305204859,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,8 +51,9 @@\n     type: \"Point\",\n     coordinates: [parseFloat(lon), parseFloat(lat)],\n   };\n \n+  // Utilizando o método com callback e wrap em uma Promise\n   con.query(`\n     SELECT id, trading_name, owner_name, document, coverage_area\n     FROM partners\n     WHERE ST_Within(\n"
                },
                {
                    "date": 1741305253346,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n \n app.use(cors());\n app.use(bodyParser.json());\n \n-// configuração da conexão (modifique conforme necessario)\n+// configuração da conexão (modifique conforme necessário)\n const db = mysql.createConnection({\n   host: 'localhost',\n   user: 'root',\n   password: '12345',\n@@ -25,9 +25,9 @@\n   }\n   console.log('Conectado ao banco de dados');\n });\n \n-// Rota POST para criat um novo parceiro\n+// Rota POST para criar um novo parceiro\n app.post('/partners', (req, res) => {\n   const { trading_name, owner_name, document, coverage_area, address } = req.body;\n \n   const query = 'INSERT INTO partners (trading_name, owner_name, document, coverage_area, address) VALUES (?, ?, ?, ?, ?)';\n@@ -51,10 +51,9 @@\n     type: \"Point\",\n     coordinates: [parseFloat(lon), parseFloat(lat)],\n   };\n \n-  // Utilizando o método com callback e wrap em uma Promise\n-  con.query(`\n+  db.query(`\n     SELECT id, trading_name, owner_name, document, coverage_area\n     FROM partners\n     WHERE ST_Within(\n       ST_GeomFromGeoJSON(coverage_area),\n@@ -84,14 +83,8 @@\n     res.status(200).json(results[0]);\n   });\n });\n \n-\n-\n-\n-\n-\n-\n // Iniciar o servidor\n app.listen(port, () => {\n   console.log(`Servidor rodando em http://localhost:${port}`);\n });\n"
                },
                {
                    "date": 1741305502169,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,27 +48,36 @@\n   }\n \n   const geoJson = {\n     type: \"Point\",\n-    coordinates: [parseFloat(lon), parseFloat(lat)],\n-  };\n+    coordinates: [parseFloat(lon), parseFloat(lat)], };\n \n-  db.query(`\n+\n+  const query = `\n     SELECT id, trading_name, owner_name, document, coverage_area\n     FROM partners\n-    WHERE ST_Within(\n+    ORDER BY ST_Distance(\n       ST_GeomFromGeoJSON(coverage_area),\n       ST_GeomFromGeoJSON('${JSON.stringify(geoJson)}')\n     )\n-  `, (err, results) => {\n+    LIMIT 1;\n+  `;\n+\n+  db.query(query, (err, results) => {\n     if (err) {\n       console.error(\"Erro ao buscar parceiros próximos:\", err);\n       return res.status(500).json({ error: \"Erro ao buscar parceiros próximos.\" });\n     }\n-    res.json(results);\n+\n+    if (results.length === 0) {\n+      return res.status(404).json({ message: 'Nenhum parceiro encontrado próximo.' });\n+    }\n+\n+    res.json(results[0]);\n   });\n });\n \n+\n // Rota GET para buscar parceiro pelo ID\n app.get('/partner/:id', (req, res) => {\n   const partnerId = req.params.id;\n   const query = 'SELECT * FROM partners WHERE id = ?';\n"
                }
            ],
            "date": 1741304464259,
            "name": "Commit-0",
            "content": "const express = require('express');\nconst mysql = require('mysql2');\nconst bodyParser = require('body-parser');\nconst cors = require('cors');\n\nconst app = express();\nconst port = 3001;\n\napp.use(cors());\napp.use(bodyParser.json());\n\n// configuração da conexão (modifique conforme necessario)\nconst db = mysql.createConnection({\n  host: 'localhost',\n  user: 'root',\n  password: '12345',\n  database: 'ze_delivery',\n});\n\n// Conectar ao banco de dados\ndb.connect((err) => {\n  if (err) {\n    console.error('Erro de conexão: ' + err.stack);\n    return;\n  }\n  console.log('Conectado ao banco de dados');\n});\n\n// Rota POST para criat um novo parceiro\napp.post('/partners', (req, res) => {\n  const { trading_name, owner_name, document, coverage_area, address } = req.body;\n\n  const query = 'INSERT INTO partners (trading_name, owner_name, document, coverage_area, address) VALUES (?, ?, ?, ?, ?)';\n  db.query(query, [trading_name, owner_name, document, JSON.stringify(coverage_area), JSON.stringify(address)], (err, result) => {\n    if (err) {\n      return res.status(500).json({ error: 'Erro ao criar parceiro', details: err });\n    }\n    res.status(201).json({ message: 'Parceiro criado com sucesso', id: result.insertId });\n  });\n});\n\n// Rota GET para buscar parceiro mais próximo\napp.get('/partners/nearby', (req, res) => {\n  const { lat, lon } = req.query;\n\n  if (!lat || !lon) {\n    return res.status(400).json({ message: 'Latitude e longitude são obrigatórios' });\n  }\n\n  const sql = `\nSELECT id, trading_name, owner_name, document, coverage_area\nFROM partners\nORDER BY ST_Distance(\n  ST_GeomFromText(CONCAT('POINT(', '-1', ' ', '-1', ')'), 4326),\n  ST_GeomFromGeoJSON(coverage_area)\n) ASC\nLIMIT 1;\n  `;\n\n  db.query(sql, [lon, lat, lon, lat], (err, results) => {\n    if (err) {\n      console.error(\"Erro ao buscar parceiro próximo\", err);\n      res.status(500).json({ error: \"Erro ao buscar parceiro próximo\" });\n    } else {\n      res.json(results[0] || {});\n    }\n  });\n});\n\n// Rota GET para buscar parceiro pelo ID\napp.get('/partner/:id', (req, res) => {\n  const partnerId = req.params.id;\n  const query = 'SELECT * FROM partners WHERE id = ?';\n\n  db.query(query, [partnerId], (err, results) => {\n    if (err) {\n      return res.status(500).json({ error: 'Erro ao buscar parceiro', details: err });\n    }\n    if (results.length === 0) {\n      return res.status(404).json({ message: 'Parceiro não encontrado' });\n    }\n    res.status(200).json(results[0]);\n  });\n});\n\n\n\n\n\n\n\n// Iniciar o servidor\napp.listen(port, () => {\n  console.log(`Servidor rodando em http://localhost:${port}`);\n});\n"
        }
    ]
}